




Potential Commands
------------------
    One drive short scan.
    One drive long scan.
    One drive wipe.
    One drive long scan and if pass then wipe.
    One drive show all test history or state there is none or state that the drive is incapable.
    All drives short scan.
    All drives long scan.
    All drives wipe.
    All drives long scan and if pass then wipe.


Having an ETA Column
--------------------
    Take the estimated completion time from the terminal output of starting a smartctl test.
    Subtract that date object from the current date object to get an ETA.
    Save the ETA to a /var/tmp file filed by serial number. If the drive has no serial number then don't save.
    After each drive.interpretSmartctlOutput() call the drive should be asked if it's currently running a test and has a
        serial number. If so then call Drive.readETAFile()


Having an ETA Column Alternative: Drive-centric Approach
--------------------------------------------------------
    The main program calls a static method of Drive to set the class variable of the ETA file path.
    Add a Drive.completionPercentage member to the class definition. It gets loaded from the ETA file and also
        re-derived at each interpretSmartCtlOutput() call which also checks if the percentage has changed in the
        wrong direction. In that event the Drive disables its ETA member on the assumption that something has gone
        screwy with the progress measurement. This will catch instances where a new smart test has been ordered
        from the command line while mdm still thought there was a previous one running based on the ETA file. If the
        percentage has changed in the right direction then the drive updates the ETA file.
    When Drive.startTest() is called it feeds the terminal output to Drive.interpretTestCommand(). This function
        checks if there's an ETA file and if so then it puts this Drive's info into the ETA file.

Ways In Which ETA Gets In and Out
---------------------------------
    IN: Start a test and Drive extracts the ETA and calls updateETAFile on itself.
    IN: interpretSmartctlOutput() sees that it's testing and has no ETA, then tries to load it from file.
    OUT: interpretSmartctlOutput() sees that it's percentageComplete has changed and updates file.
    OUT: interpretSmartctlOutput() sees that it's not testing but has an ETA, it removes its entry from the file.
    Drive.updateStatusFile(resetETA=False)
        Updates ETA or removes self. Setting resetETA=True will force an overwrite of any ETA on file (use when
            starting a new test).


Things That Should Be Possible When Drawing the Drive Table
-----------------------------------------------------------
    Re-arrange the column ordering.
    Set individual column widths.
    Turn columns off or on.
    Move the top-left corner position.
    Specify a box (max width and height) that it won't overflow.
    Make it scrollable?


Redoing Drive Table Drawing
---------------------------
buildDriveTable()
    This method fully understand what Drives are. It's tightly coupled to that class.
    It does not know the column widths, it just creates a 2-D array of ColoredString objects.
    Inserts color coding into the strings based on value tolerances.
    Determines the column ordering and which columns exist.
    Writes the columns header.
drawTable(String table[][], columnWidths, x, y, width, height)
    Knows nothing about Drives.
    Draws strings at screen positions based on TableLayout description.
    Truncates strings to the column widths specified in TableLayout and adds an ellipsis if needed.
    Understands color codes and uses them when making its curses.putStr() calls.
    Truncates strings and table rows to fit within the given width and height restrictions.
    Should probably draw to a curses.Pad and then paste the pad onto the screen.
ColoredString
    length(): Returns the length of the string, not including color codes.
    subset(start, end): Returns a section of a string, including color codes but indexed without them.
drawColoredString(x, y, string)
    Draws a color-coded string at a given location.
TableLayout
    Has column widths but no understanding of what's in those columns.
    Has no connection to the Drive class.


Rethinking Drive State
----------------------
Questions
    What state is a drive in if it's already running a SMART test when the program starts?
        Note that you should get a completion alarm if a drive was testing then finishes during program run.
    Drive should be tracking its transition from testing to completion. Whatever its post-test state it should also
        note somewhere that it was testing and has since completed. How will mdm distinguish between drives that
        have completed a test during mdm's runtime and those that have completed a test before it was run or after
        it already sounded an alarm? A Drive.completedTest flag that starts False and switches to True when the
        state transitions out from DR_STATE_TESTING would seem the right way but how does MDM distinguish between
        drives it's already alarmed for versus one that has just completed a test and still needs an alarm?
States/Situations
    Program starts. Drive states are being queried, testInProgress=False.
    Queries complete. Found one test-in-progress, testInProgress=True.


Rethinking Drive State Proposal:  Drive Subscribers and a DriveWatcher Class
----------------------------------------------------------------------------
Drive calls Drive.setState(state). This method then checks the given state against the current state and if the
state has changed then it notifies all of its stateChangeSubscribers (or maybe stateChangeListeners) of the
change. Add a DriveWatcher class that subscribes itself to all of these and maintains its own state of
NOT_TESTING, TESTS_IN_PROGRESS, TESTS_COMPLETED_AWAITING_ACKNOWLEDGMENT by adding, removing and transferring
drives between lists of drivesTesting, drivesIdle, drivesCompleted, drivesAborted, etc... Then the program has one
instance of DriveWatcher and triggers its completionAlert flag by asking the DriveWatcher its state. The program
can also refer to DriveWatcher's lists to decide whether to describe the state of a drive by its own state
description or by whether its present on the drivesCompleted list of the program's DriveWatcher instance, in
which case the program would describe the drive in its state as "Completed".


Testing Scheme
--------------
    Start a short test on a drive, quit and re-run program. Does it alarm on test completion like it should?
    If a test completes and you start another, does mdm alarm on completion of the second test?
    If multiple drives are testing, does mdm wait until the last one finishes before alarming?
    If two drives are testing and one is aborted will the other still alarm on completion like it should?
    If only one drive is testing and is aborted does it alarm? It should not.