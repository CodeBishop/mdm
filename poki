#!/usr/bin/env python

# Poki is a program for fetching the most pertinent Smartctl information on all connected
# drives and presenting it in a summary that fits on one page.

# USE CASES
#     (1) The user wants to see:
#             What hard drives are connected? (i.e. are they all showing up?)
#             What was the outcome of the most recent scan? Or an indication there's never been one.
#             Has there been any past scan outcomes that showed failures?
#             Are there any red flags (like bad realloc)?
#             Is a scan currently running on a drive and what is its progress state and estimated time remaining?
#     (2) The user wants to be able to bar code scan a particular drive and get all of its info in one section.
#           This should show the complete scan history of the drive rather than just most recent and past failed.
#     (3) The user wants to start long scans on drives and see their progress state.
#     (4) The user want to start drive wipes and see their progress state.
#     (5) The user wants to quit.


# TESTING TO DO
#   Test with various drives including both SSD, HDD and USB.
#   Test trying to scan a drive while it's in use (i.e. system drive).
#   Test operations on a drive that short and long smartctl tests in-progress.


# TO DO
#   Remove the terminalCommand() function if you don't end up using it.
#   Make a wrapper class for pySMART's Device class so that you can have things like:
#       bool DeviceWrapper.load() to load or refresh its fields.
#       enum DeviceWrapper.runLongTest() and it returns a value saying whether one's in progress or now started.
#       bool DeviceWrapper.search(searchString) return true if the string was a subset of any field.
#   Add an interactive option for typing in a field and getting a summary of every drive which had a match
#       for that field. This way you can scan any barcode on a drive and see what's up with it.
#   Consider making it so you can operate the program entirely with a bar code scanner.
#       Can you write a barcode scannable command for auto-mounting a USB drive?
#   Add the ability to show previous long scan results.
#   Change the interface so that it always shows the drive summary section followed by a menu of options and
#       entering a serial number highlights that drive in the summary with a blue-background on its description.
#   Look into adding wipe functionality to eliminate the DBAN step. Include the ability to do military-spec
#       erasure. There's a lot of consumer demand for that level of erasure even if it's not necessary.
#   Add a command for starting long and short tests.
#   Test that you can start a long test, quit this program, re-run this program and check the current testing status.
#   Apparently some drives have a firmware function for doing an automated secure wipe. This would be better than
#       DBAN or manual overwriting and should be investigated.
#   Move code out of main()
#       Create a loop of:
#           enum userCommand = interpretInputAsCommand()
#           if userCommand = CMD_UNRECOGNIZED:
#               searchMatches = searchDevices(deviceList)
#               for device in searchMatches:
#                   print device.summary()
#               if len(searchMatches) == 1:
#                   print device.multilineHistory()


from deviceWrapper import *
import re
import subprocess
import os
import sys
import glob
import warnings

# Import pySMART but suppress the warning messages about not being root.
warnings.filterwarnings("ignore")
from pySMART import Device
from pySMART.utils import admin
warnings.filterwarnings("default")

# ANSI color codes that are both bash (Ubuntu) and zsh compatible (sysrescue).
# Taken from:  https://en.wikipedia.org/wiki/ANSI_escape_code#3.2F4_bit
COLOR_DEFAULT = '\x1b[0m'
COLOR_RED = '\x1b[1;31m'
COLOR_YELLOW = '\x1b[1;33m'
COLOR_GREEN = '\x1b[1;32m'

# Fetch the null device for dumping unsightly error messages into.
DEVNULL = open(os.devnull, 'w')
MISSING_FIELD = ''  # This is what capture() returns if can't find the search string.
RECORD_CAPTURE_FAILURE, IGNORE_CAPTURE_FAILURE = 1, 2

captureFailures = list()
debugMode = True


# Program definition.
def main():
    # Hide traceback dump unless in debug mode.
    if not debugMode:
        sys.tracebacklimit = 0

    # Check for root.
    if not admin():
        print "Only user ID #0 (root) can run this program"
        exit(1)

    # Get a list of all hard drive device paths.
    devicePaths = glob.glob('/dev/sd?')

    devices = list()

    # Print column header.
    print summaryHeader()

    # Load each device and print a summary of it.
    for devicePath in sorted(devicePaths):
        # Attempt to load device smartctl info (and suppress pySmart warnings).
        device = DeviceWrapper(devicePath)
        devices.append(device)

        print device.oneLineSummary()

    # Show failed attributes for any devices.
    if any(device.hasFailedAttributes() for device in devices):
        print attributeHeader()
        for device in devices:
            for failedAttribute in device.failedAttributes:
                print failedAttribute

    # Begin interactive mode.
    while True:
        print "\nEnter drive search string or enter command: (q)uit, show (a)ll, "
        userInput = raw_input()
        if userInput == 'q':
            break
        elif len(userInput) < 2:
            print "Unrecognized command."
        else:
            searchMatchingDevices = list()
            for device in devices:
                if device.matchSearchString(userInput):
                    searchMatchingDevices.append(device)
            if len(searchMatchingDevices) == 0:
                print "No drives matched search string."
            elif len(searchMatchingDevices) == 1:
                print "\nSearch matched one drive:"
                print searchMatchingDevices[0].oneLineSummary()
            else:
                print "\nSearch matched multiple drives:"
                for device in searchMatchingDevices:
                    print device.oneLineSummary
        # if userInput in deviceBySerial:
        #     print "\n"
        #     printDeviceColumnHeader()
        #     print deviceBySerial[userInput]


# # Program definition.
# def main():
#     # Hide traceback dump unless in debug mode.
#     if not debugMode:
#         sys.tracebacklimit = 0
#
#     # Check for root.
#     if not admin():
#         print "Only user ID #0 (root) can run this program"
#         exit(1)
#
#     # Get a list of all hard drive device paths.
#     devicePaths = glob.glob('/dev/sd?')
#
#     whenFailedAttributes = list()  # List of WHEN_FAILED attributes of all drives.
#     deviceBySerial = dict()  # Dictionary of devices by serial number.
#
#     # Print column header.
#     printDeviceColumnHeader()
#
#     # For each drive output a 1-line summary of smartctl info.
#     for devicePath in sorted(devicePaths):
#         # Attempt to load device smartctl info (and suppress pySmart warnings).
#         warnings.filterwarnings("ignore")
#         device = Device(devicePath)
#         warnings.filterwarnings("default")
#         if device.name is None or device.interface is None:
#             print devicePath + " does not respond to smartctl enquiries."
#             continue
#
#         # Gather attribute data
#         # Fetch the number of reallocated sectors if smartctl knows it.
#         if device.attributes[5] is not None:
#             reallocCount = int(device.attributes[5].raw)
#             if reallocCount > 0:
#                 textColor = COLOR_RED
#             else:
#                 textColor = COLOR_GREEN
#             reallocText = textColor + str(reallocCount) + COLOR_DEFAULT
#         else:
#             reallocText = COLOR_YELLOW + "???" + COLOR_DEFAULT
#
#         # Fetch the number of G-Sense errors if smartctl knows it.
#         GSenseCount = str(device.attributes[191].raw) if device.attributes[191] else "???"
#
#         # Fetch the number of hours if smartctl knows it.
#         # NOTE: smartctl may output hour-count in scan results yet not have it as an "attribute".
#         if device.attributes[9] is not None:
#             hours = int(re.findall("\d+", device.attributes[9].raw)[0])
#             if hours > 10000:
#                 textColor = COLOR_YELLOW
#             else:
#                 textColor = COLOR_DEFAULT
#             driveHours = textColor + str(hours) + ' ' + COLOR_DEFAULT
#         else:
#             driveHours = "???"
#
#         # Fetch all WHEN_FAILED attributes that were found.
#         whenFailedStatus = "-"
#         for attribute in device.attributes:
#             if attribute and attribute.when_failed != "-":
#                 whenFailedStatus = COLOR_YELLOW + "see below" + COLOR_DEFAULT
#                 whenFailedAttributes.append((devicePath, attribute))
#
#         # Assess the current testing status of the device.
#         testResultCode = device.get_selftest_result()[0]
#         if testResultCode == 0:
#             testingState = COLOR_GREEN + "complete" + COLOR_DEFAULT
#         elif testResultCode == 1:
#             testingState = "in progress"
#         elif testResultCode == 2:
#             testingState = "idle"
#         else:
#             testingState = COLOR_YELLOW + "state:" + str(device.get_selftest_result()) + COLOR_DEFAULT
#
#         # Construct one-line summary of drive.
#         description = ""
#         description += leftColumn(devicePath, CW_PATH)
#         description += leftColumn(("SSD" if device.is_ssd else "HDD"), CW_HDD_TYPE)
#         description += leftColumn(str(device.capacity), CW_SIZE)
#         description += leftColumn(device.model, CW_MODEL)
#         description += leftColumn(device.serial, CW_SERIAL)
#         description += leftColumn(reallocText, CW_REALLOC)
#         description += leftColumn(driveHours, CW_DRIVEHOURS)
#         description += leftColumn(GSenseCount, CW_GSENSE)
#         description += leftColumn(whenFailedStatus, CW_WHENFAILEDSTATUS)
#         description += leftColumn(testingState, CW_TESTINGSTATE)
#
#         # Print out one-line summary of drive.
#         print description
#
#         # Store description in lookup table.
#         deviceBySerial[device.serial] = description
#
#     # Print out any WHEN_FAILED attributes that were found.
#     if len(whenFailedAttributes) > 0:
#         print "\nPATH     ID# ATTRIBUTE_NAME          VAL WST THR TYPE     UPDATED WHEN_FAILED RAW_VALUE"
#         print "-----------------------------------------------------------------------------------------"
#         for (devicePath, attribute) in whenFailedAttributes:
#             print devicePath, attribute
#
#     # Present interactive mode.
#     while True:
#         print "\nEnter drive serial number or command: (q)uit, show (a)ll, "
#         userInput = raw_input()
#         if userInput == 'q':
#             break
#         if userInput == 'a':
#             print "Command not implemented yet."
#         if userInput in deviceBySerial:
#             print "\n"
#             printDeviceColumnHeader()
#             print deviceBySerial[userInput]


def printDeviceColumnHeader():
    sys.stdout.write(leftColumn("Path", CW_PATH))
    sys.stdout.write(leftColumn("Type", CW_HDD_TYPE))
    sys.stdout.write(leftColumn("Size", CW_SIZE))
    sys.stdout.write(leftColumn("Model", CW_MODEL))
    sys.stdout.write(leftColumn("Serial", CW_SERIAL))
    sys.stdout.write(leftColumn("ReAlloc", CW_REALLOC))
    sys.stdout.write(leftColumn("Hours", CW_DRIVEHOURS))
    sys.stdout.write(leftColumn("GSen", CW_GSENSE))
    sys.stdout.write(leftColumn("WHENFAIL", CW_WHENFAILEDSTATUS))
    sys.stdout.write(leftColumn("TestState", CW_TESTINGSTATE))
    print "\n" + "-" * (CW_PATH + 1 + CW_HDD_TYPE + 1 + CW_SIZE + 1 + CW_MODEL + 1 +
                        CW_SERIAL + 1 + CW_REALLOC + 1 + CW_DRIVEHOURS + 1 +
                        CW_GSENSE + 1 + CW_WHENFAILEDSTATUS + 1 + CW_TESTINGSTATE)


# Get the output from a terminal command and block any error messages from appearing.
def terminalCommand(command):
    output, _ = subprocess.Popen(["sudo"] + command.split(), stdout=subprocess.PIPE, stderr=DEVNULL).communicate()
    return output

# Run the program.
main()
