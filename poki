#!/usr/bin/env python

# Poki is a program for fetching the most pertinent Smartctl information on all connected
# drives and presenting it in a summary that fits on one page.


# TO DO
#   Test with various drives including both SSD and HDD.
#   Remove the terminalCommand() function if you don't end up using it.
#   Add an interactive option for typing in a field and getting a summary of every drive with had a match
#       for that field. This way you can scan any barcode on a drive and see what's up with it.
#   Consider making it so you can operate the program entirely with a bar code scanner.
#       Can you write a scannable command for auto-mounting a USB drive?
#


import re
import subprocess
import os
import sys
import glob
import warnings

# Import pySMART but suppress the warning messages about not being root.
warnings.filterwarnings("ignore")
from pySMART import Device
from pySMART.utils import admin
warnings.filterwarnings("default")

# ANSI color codes that are both bash (Ubuntu) and zsh compatible (sysrescue).
# Taken from:  https://en.wikipedia.org/wiki/ANSI_escape_code#3.2F4_bit
COLOR_DEFAULT = '\x1b[0m'
COLOR_RED = '\x1b[1;31m'
COLOR_YELLOW = '\x1b[1;33m'
COLOR_GREEN = '\x1b[1;32m'

# Fetch the null device for dumping unsightly error messages into.
DEVNULL = open(os.devnull, 'w')
MISSING_FIELD = ''  # This is what capture() returns if can't find the search string.
RECORD_CAPTURE_FAILURE, IGNORE_CAPTURE_FAILURE = 1, 2

captureFailures = list()
debugMode = False

# Define column widths for displaying drive summaries (doesn't include one-space separator).
CW_PATH = 8
CW_HDD_TYPE = 4
CW_SIZE = 8
CW_MODEL = 20
CW_SERIAL = 16
CW_REALLOC = 7
CW_DRIVEHOURS = 7
CW_GSENSE = 5
CW_WHENFAILEDSTATUS = 9


# Program definition.
def main():
    # Hide traceback dump unless in debug mode.
    if not debugMode:
        sys.tracebacklimit = 0

    # Check for root.
    if not admin():
        print "Only user ID #0 (root) can run this program"
        exit(1)

    # Get a list of all hard drive device paths.
    devicePaths = glob.glob('/dev/sd?')

    # Start a list of all device WHEN_FAILED attributes.
    whenFailedAttributes = list()

    # Start a dictionary of devices by serial number.
    deviceBySerial = dict()

    # Print column header.
    sys.stdout.write(leftColumn("Path", CW_PATH))
    sys.stdout.write(leftColumn("Type", CW_HDD_TYPE))
    sys.stdout.write(leftColumn("Size", CW_SIZE))
    sys.stdout.write(leftColumn("Model", CW_MODEL))
    sys.stdout.write(leftColumn("Serial", CW_SERIAL))
    sys.stdout.write(leftColumn("ReAlloc", CW_REALLOC))
    sys.stdout.write(leftColumn("Hours", CW_DRIVEHOURS))
    sys.stdout.write(leftColumn("GSen", CW_GSENSE))
    sys.stdout.write(leftColumn("WHENFAIL", CW_WHENFAILEDSTATUS))
    print "\n" + "-" * (CW_PATH + 1 + CW_HDD_TYPE + 1 + CW_SIZE + 1 + CW_MODEL + 1 +
                        CW_SERIAL + 1 + CW_REALLOC + 1 + CW_DRIVEHOURS + 1 +
                        CW_GSENSE + 1 + CW_WHENFAILEDSTATUS)

    # For each drive output a 1-line summary of smartctl info.
    for devicePath in sorted(devicePaths):
        # Attempt to load device smartctl info (and suppress pySmart warnings).
        warnings.filterwarnings("ignore")
        device = Device(devicePath)
        warnings.filterwarnings("default")
        if device.name is None or device.interface is None:
            print devicePath + " does not respond to smartctl enquiries."
            continue

        # Gather attribute data
        # Fetch the number of reallocated sectors if smartctl knows it.
        if device.attributes[5] is not None:
            reallocCount = int(device.attributes[5].raw)
            if reallocCount > 0:
                textColor = COLOR_RED
            else:
                textColor = COLOR_GREEN
            reallocText = textColor + str(reallocCount) + COLOR_DEFAULT
        else:
            reallocText = COLOR_YELLOW + "???" + COLOR_DEFAULT

        # Fetch the number of G-Sense errors if smartctl knows it.
        GSenseCount = str(device.attributes[191].raw) if device.attributes[191] else "???"

        # Fetch the number of hours if smartctl knows it.
        # NOTE: smartctl may output hour-count in scan results yet not have it as an "attribute".
        if device.attributes[9] is not None:
            hours = int(re.findall("\d+", device.attributes[9].raw)[0])
            if hours > 10000:
                textColor = COLOR_YELLOW
            else:
                textColor = COLOR_DEFAULT
            driveHours = textColor + str(hours) + ' ' + COLOR_DEFAULT
        else:
            driveHours = "???"

        # Fetch all WHEN_FAILED attributes that were found.
        whenFailedStatus = "-"
        for attribute in device.attributes:
            if attribute and attribute.when_failed != "-":
                whenFailedStatus = "see below"
                whenFailedAttributes.append((devicePath, attribute))
                # print COLOR_YELLOW + str(attribute) + COLOR_DEFAULT

        # Construct one-line summary of drive.
        description = ""
        description += leftColumn(devicePath, CW_PATH)
        description += leftColumn(("SSD" if device.is_ssd else "HDD"), CW_HDD_TYPE)
        description += leftColumn(str(device.capacity), CW_SIZE)
        description += leftColumn(device.model, CW_MODEL)
        description += leftColumn(device.serial, CW_SERIAL)
        description += leftColumn(reallocText, CW_REALLOC)
        description += leftColumn(driveHours, CW_DRIVEHOURS)
        description += leftColumn(GSenseCount, CW_GSENSE)
        description += leftColumn(whenFailedStatus, CW_WHENFAILEDSTATUS)

        # Print out one-line summary of drive.
        print description

        # Store description in lookup table.
        deviceBySerial[device.serial] = description

    # Print out any WHEN_FAILED attributes that were found.
    if len(whenFailedAttributes) > 0:
        print "\nPATH     ID# ATTRIBUTE_NAME          VAL WST THR TYPE     UPDATED WHEN_FAILED RAW_VALUE"
        print "-----------------------------------------------------------------------------------------"
        for (devicePath, attribute) in whenFailedAttributes:
            print devicePath, attribute

    # Present interactive mode.
    while True:
        print "Enter drive serial number or q to quit"
        userInput = raw_input()
        if userInput == 'q':
            break



def leftColumn(someString, width):
    # Strip ANSI codes before calculating string length.
    length = len(re.sub(r'\x1b\[([0-9,A-Z]{1,2}(;[0-9]{1,2})?(;[0-9]{3})?)?[m|K]?', '', someString))

    # Left justify string, truncate (with ellipsis) or pad with spaces to fill column width.
    if length <= width:
        # NOTE: str.ljust() mis-formats this under some circumstances so don't use it.
        return someString + ' ' * (width - length + 1)
    else:
        return someString[:width-3] + "... "
    # Non-ellipsis version.
    # return someString.ljust(width)[:width] + ' '


# Get the output from a terminal command and block any error messages from appearing.
def terminalCommand(command):
    output, _ = subprocess.Popen(["sudo"] + command.split(), stdout=subprocess.PIPE, stderr=DEVNULL).communicate()
    return output

# Run the program.
main()


