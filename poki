#!/usr/bin/env python

# Poki is a program for fetching the most pertinent Smartctl information on all connected
# drives and presenting it in a summary that fits on one page.

# USE CASES
#     (1) The user wants to see:
#             What hard drives are connected? (i.e. are they all showing up?)
#             What was the outcome of the most recent scan? Or an indication there's never been one.
#             Has there been any past scan outcomes that showed failures?
#             Are there any red flags (like bad realloc)?
#             Is a scan currently running on a drive and what is its progress state and estimated time remaining?
#     (2) The user wants to be able to bar code scan a particular drive and get all of its info in one section.
#           This should show the complete scan history of the drive rather than just most recent and past failed.
#     (3) The user wants to start long scans on drives and see their progress state.
#     (4) The user want to start drive wipes and see their progress state.
#     (5) The user wants to quit.
#     (6) The user wants to bar code scan 3 drives and then just enter (t)est once to start them up.


# TESTING TO DO
#   Test with various drives including both SSD, HDD and USB.
#   Test trying to scan a drive while it's in use (i.e. system drive).
#   Test operations on a drive that short and long smartctl tests in-progress.
#   Test that you can start a long test, quit this program, re-run this program and check the current testing status.
#   Test that the history enumerator sensibly interprets incomplete tests in the drive history (mid-test shutdowns).


# TO DO
#   Remove the terminalCommand() function if you don't end up using it.
#   Make a wrapper class for pySMART's Device class so that you can have things like:
#       enum DeviceWrapper.runLongTest() and it returns a value saying whether one's in progress or now started.
#   Consider making it so you can operate the program entirely with a bar code scanner.
#       Can you write a barcode scannable command for auto-mounting a USB drive?
#   Add the ability to show previous long scan results.
#   Change the interface so that it always shows the drive summary section followed by a menu of options and
#       entering a serial number highlights that drive in the summary with a blue-background on its description.
#   Look into adding wipe functionality to eliminate the DBAN step. Include the ability to do military-spec
#       erasure. There's a lot of consumer demand for that level of erasure even if it's not necessary.
#   Add a command for starting long and short tests.
#   Apparently some drives have a firmware function for doing an automated secure wipe. This would be better than
#       DBAN or manual overwriting and should be investigated.
#   Add capability to capture the message where some drives warn they need their firmware updated.
#   Find a way to find out if a test is in progress. You'll probably need to directly query smartctl because
#       pySMART only seems to be aware of tests that were started by itself.
#     search by devicePath so you can type "sda"
#     Single drive description should include WHEN_FAIL attributes.
#   Start a user ticket system for the program.
#   Rename the program (Doodle survey?).
#   If you can get a drive's percentage of long-test completion then show it as a progress bar with a percentage
#       centered in the middle of it and an ETA at one end.
#   Fix whatever's causing leftColumn() to miscalculate the string "90% complete".
#   Fix crash caused by pushing up-arrow and enter as user input.
#   For never-tested drives make the individual report say "No history of tests" instead of a column header.
#   Add drive type and size to searchable fields.
#   Add connection type (SCSI, SATA, IDE) as a column and as a searchable field.
#   Cover all 4 of the big indicators: scan errors(198), reallocation count(196), offline reallocation(5) and
#       probational count (197).
#   Write an install.sh that will put poki in some appropriate bin folder.
#   Find a drive that's never been tested to use as an example and put tape markers on your test drives to mark
#       what each one is an example of.
#   Try the various -d options for bridging various USB enclosures.
#   Create a "history" enumerator to describe the drive's history of tests. Possible states:
#       good, bad, never tested, never long-tested, not capable of testing
#       good, bad, no test,      no longs,          not able
#   The counterpart to the history enumerator will be the status enumerator with states:
#       completed short, completed long, running short, running long, idle, wiping
#   Make the one-line summary also a searched member as a catch-all that the user can type anything they see.
#   Change the search results to highlight all matching drives and keep adding new ones with each search then also
#       have subtractive searches, select all and cancel all.
#   Add a centerColumn() function so that reAlloc and hours can be centered in their columns like numbers should be.
#   Figure out why the first time this program is run it can't get re-alloc count.
#   From a PXE environment see if you can copy this program to a directory and remove the USB stick. Does the
#       file persist? What about if you reboot?


from deviceWrapper import *
import os
import sys
import glob
import warnings

# Import pySMART but suppress the warning messages about not being root.
warnings.filterwarnings("ignore")
from pySMART.utils import admin
warnings.filterwarnings("default")

# ANSI color codes that are both bash (Ubuntu) and zsh compatible (sysrescue).
# Taken from:  https://en.wikipedia.org/wiki/ANSI_escape_code#3.2F4_bit
COLOR_DEFAULT = '\x1b[0m'
COLOR_RED = '\x1b[1;31m'
COLOR_YELLOW = '\x1b[1;33m'
COLOR_GREEN = '\x1b[1;32m'
COLOR_CYAN = '\x1b[1;36m'

# Fetch the null device for dumping unsightly error messages into.
MISSING_FIELD = ''  # This is what capture() returns if can't find the search string.
RECORD_CAPTURE_FAILURE, IGNORE_CAPTURE_FAILURE = 1, 2

captureFailures = list()
debugMode = True


# Program definition.
def main():
    # Hide traceback dump unless in debug mode.
    if not debugMode:
        sys.tracebacklimit = 0

    # Check for root.
    if not admin():
        print "Only user ID #0 (root) can run this program"
        exit(1)

    print COLOR_CYAN + "Scanning for devices...\n" + COLOR_DEFAULT
    devices = findAllDrives()

    # Print column header.
    print summaryHeader()
    printAllDeviceSummaries(devices)

    # Show failed attributes for any devices.
    if any(device.hasFailedAttributes() for device in devices):
        print attributeHeader()
        for device in devices:
            for failedAttribute in device.failedAttributes:
                print failedAttribute

    # Begin interactive mode.
    while True:
        print COLOR_CYAN + "\nEnter 1 character for command or >1 for search."
        print "Commands: (q)uit, show (a)ll, (r)efresh" + COLOR_DEFAULT
        sys.stdout.write("> ")
        userInput = raw_input()
        if userInput == 'q':
            break
        elif userInput == 'a':
            print summaryHeader()
            for device in devices:
                print device.oneLineSummary()
        elif userInput == 'r':
            print COLOR_CYAN + "Refreshing devices!\n" + COLOR_DEFAULT
            devices = findAllDrives()
            printDeviceColumnHeader()
            printAllDeviceSummaries(devices)

        # Presume user doesn't enter more than one character for anything but a search string.
        elif len(userInput) < 2:
            print COLOR_CYAN + "Unrecognized command." + COLOR_DEFAULT
        else:
            searchMatchingDevices = list()
            for device in devices:
                if device.matchSearchString(userInput):
                    searchMatchingDevices.append(device)
            if len(searchMatchingDevices) == 0:
                print COLOR_CYAN + "No drives matched search string." + COLOR_DEFAULT
            elif len(searchMatchingDevices) == 1:
                print COLOR_CYAN + "\nSearch matched one drive:" + COLOR_DEFAULT
                print searchMatchingDevices[0].oneLineSummary()
                searchMatchingDevices[0].device.all_selftests()
            else:
                print COLOR_CYAN + "\nSearch matched multiple drives:" + COLOR_DEFAULT
                for device in searchMatchingDevices:
                    print device.oneLineSummary()


def findAllDrives():
    # Get a list of all hard drive device paths.
    devicePaths = glob.glob('/dev/sd?')

    devices = list()

    # Load each device and print a summary of it.
    for devicePath in sorted(devicePaths):
        # Attempt to load device smartctl info (and suppress pySmart warnings).
        device = DeviceWrapper(devicePath)
        devices.append(device)

    return devices


def printAllDeviceSummaries(devices):
    for device in devices:
        print device.oneLineSummary()


def printDeviceColumnHeader():
    sys.stdout.write(leftColumn("Path", CW_PATH))
    sys.stdout.write(leftColumn("Type", CW_HDD_TYPE))
    sys.stdout.write(leftColumn("Size", CW_SIZE))
    sys.stdout.write(leftColumn("Model", CW_MODEL))
    sys.stdout.write(leftColumn("Serial", CW_SERIAL))
    sys.stdout.write(leftColumn("ReAlloc", CW_REALLOC))
    sys.stdout.write(leftColumn("Hours", CW_DRIVE_HOURS))
    sys.stdout.write(leftColumn("GSen", CW_GSENSE))
    sys.stdout.write(leftColumn("WHENFAIL", CW_WHEN_FAILED_STATUS))
    sys.stdout.write(leftColumn("TestState", CW_TESTING_STATE))
    print "\n" + "-" * (CW_PATH + 1 + CW_HDD_TYPE + 1 + CW_SIZE + 1 + CW_MODEL + 1 +
                        CW_SERIAL + 1 + CW_REALLOC + 1 + CW_DRIVE_HOURS + 1 +
                        CW_GSENSE + 1 + CW_WHEN_FAILED_STATUS + 1 + CW_TESTING_STATE)

# Run the program.
main()
