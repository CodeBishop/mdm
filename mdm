#!/usr/bin/env python

# Multi-Drive Manager (mdm)
# A utility for managing the simultaneous S.M.A.R.T. testing and secure wiping of multiple data storage devices.

# Misc Notes
# Summary of sysrescue display differences.
#   The terminal does not get restored when a curses program ends. The prompt re-appears at the bottom
#       and the screen remains cluttered with whatever was on display.
#   Only 8 colors are available and the curses.COLORS constant reflects that fact.
#   Font effects: dim=underline=normal, reverse=standout(fg/bg color reversal), bold is brighter text.
#       blink is grey text on dark grey background (no blinking).
#   Characters known to appear in smartctl output:
#       Parantheses, numbers, letters, underscores, whitespace, +, -, :, =, ", ., square brackets,

# High Priority To Do:
# Create an Attribute class and use StorageDevice.smartctlLines to build StrageDevice.attributes.
# Identify WHEN_FAIL attributes and compile list of them.
# Switch over to identifying attributes by their ID number, not their text description (which varies even for
#   reallocated sector count).
# Make the program auto-refresh every 5 minutes or so.
#
# See if there's a quick way to make the program reverse color text on devices that just finished a test.
# Show number of hours.
#   The smartmontools FAQ https://www.smartmontools.org/wiki/FAQ says:
#       Some Maxtor's record attribute #9 in minutes not hours (correctable by '-v 9,minutes').
#       Some Fujitsu's record attribute #9 in seconds not hours (correctable by '-v 9,seconds').
#   Look for discrepancies in drive hours. Isn't there a bunch of ridiculously low-hour Fujitsu's? Do their logged
#       tests show different hours from their attribute #9?
#   Check if drives' hours in the test logs and attribute #9 are consistent.

# Moderate Priority To Do:
# Show gsense.
# See if StorageDevice.smartctlLines can simplify some of the stuff you're doing with StorageDevice.smartctlOutput.
# Highlight drives that have completed a test.
# Try to find some way to make the system beep. Printing "\a" and "\007" didn't work.
# Show progress of currently running scan.
# Refactor StorageDevice class. It's sprawling and has some huge methods that should be broken down.
# Add a test that if the number of hours is less than a 1000 then the program warns you that smartctl may be
#   misinterpreting minutes into hours when hours was what the manufacturer actually meant.
# Make shift+s be a way to order all idle drives to short-test themselves. Same for long tests.
# Make it beep when a drive completes a scan and triple beep when all drives become idle.
#   Maybe even make it triple-beep on a decreasing time-scale (up to 3 times?) and show a flashing message window.
# Add functionality to extrapolate test completion within 1% (rather than 10%) based on smartctl reporting and time.
# Test that the (r)efresh command relocates the selector properly if devices are hot-unplugged.
# Add an RPM column that eliminates the type column as an ssd/hdd divider (and also provides more info).
# Add the ability to abort a test-in-progress.

# Low (long-term) Priority To Do:
# Rewrite the section of code that reads the attribute table. It's a pair of for-loops right now and clunky.
# Make the program detect if smartmontools is not installed so it can advise the user to install it.
# Make the program work under Windows and Mac OS.
# Turn the StorageDevice class into a clean library suitable for general-purpose use and GPL release it.

import curses
import glob
import time

from mdmSMART.Drive import *
from pySMART.utils import admin


# Drawing positions for view layout.
POS_BX = 1  # Left side of search/help bar.
POS_BY = 3  # Top side of search/help bar.
POS_MX = 1  # Left side of message bar.
POS_MY = 5  # Top side of message bar.
POS_DLX = 8  # Left side of drive list.
POS_DLY = 8  # Top side of drive list.

SELECTOR_ABSENT = -1
NO_KEYS_PRESSED = -1
ESCAPE_KEY = 27
ENTER_KEY = 10
RAPID_KEYPRESS_THRESHOLD = 30  # Minimum milliseconds between two getch() calls for input to be considered user-based.
SEARCH_PROMPT = "Find: "

# Before initializing curses, remove the Esc key delay from the OS environment.
os.environ.setdefault('ESCDELAY', '0')

# Check for root.
if not admin():
    print "Only user ID #0 (root) can run this program"
    exit(1)


# DEBUG: a junk function for playing with color rendering.
def main2(stdscr):
    # curses.start_color()
    curses.use_default_colors()
    for i in range(0, curses.COLORS):
        curses.init_pair(i + 1, i, -1)
    stdscr.addstr(0, 0, '{0} colors available'.format(curses.COLORS))
    maxy, maxx = stdscr.getmaxyx()
    maxx = maxx - maxx % 5
    x = 0
    y = 1
    stdscr.addstr(12, 0, str(curses.COLORS))
    try:
        for i in range(0, curses.COLORS):
            stdscr.addstr(y, x, '{0:5}'.format(i), curses.color_pair(i))
            x = (x + 5) % maxx
            if x == 0:
                y += 1
    except curses.ERR:
        pass
    stdscr.getch()


def main(screen):
    initCurses(screen)  # Set parameters of curses environment.
    devices = list()
    selector = SELECTOR_ABSENT  # Hide the drive selector until drives are found.
    searchString = ""
    searchModeFlag = False  # Toggle search mode (as versus command mode).
    displayTestFlag = False  # Toggle a display properties test.
    redrawScreen = True  # Signal a screen redraw/refresh.
    refreshDevices = True  # Signal a rescan of all the drives.
    messageBarContents = ""

    exitFlag = False
    while not exitFlag:
        # Rescan the drives if signaled to.
        if refreshDevices:
            # Reset the signal flag.
            refreshDevices = False
            # Rescan the drives
            devices = findAllDrives()
            # Remove the selector if the device list is now empty.
            if len(devices) == 0:
                selector = SELECTOR_ABSENT
            # If the device list is not empty then check the selector position.
            else:
                # Bump selector to the end of the device list if it was pointing beyond it.
                if selector >= len(devices):
                    selector = len(devices) - 1
                # Place the selector on the first item if the selector is currently absent.
                if selector == SELECTOR_ABSENT:
                    selector = 0

        # Draw the screen if anything has changed.
        if redrawScreen:
            # Reset the signal flag.
            redrawScreen = False

            # Clear the screen
            screen.clear()
            screen.border(0)

            # Print the program title.
            screen.addstr(1, 1, "Multi-Drive Manager", curses.A_REVERSE)

            # Print the search bar or help bar.
            if searchModeFlag:
                screen.addstr(POS_BY, POS_BX, SEARCH_PROMPT + searchString)
            else:
                screen.addstr(POS_BY, POS_BX, "(f)ind (d)isplay test (r)efresh (s)hort test (l)ong test (a)bort test (q)uit")

            # Print the message bar.
            screen.addstr(POS_MY, POS_MX, messageBarContents)

            # Print the drive list.
            screen.addstr(POS_DLY - 1, POS_DLX, summaryHeader())
            for y in range(len(devices)):
                screen.addstr(POS_DLY + y, POS_DLX, devices[y].oneLineSummary())

            # If a drive is currently selected.
            if selector is not SELECTOR_ABSENT:
                # Draw the selector.
                screen.addstr(POS_DLY + selector, POS_DLX - 4, "-->")

                # Note the device the selector is pointed at.
                device = devices[selector]
                deviceName = device.devicePath  # Refer to the device by its path.

                # Print detailed info for the currently selected device starting from a position below the drive list.
                posX, posY = 1, POS_DLY + len(devices) + 1

                # Print the current smartctl testing status.
                if device.connector == "USB":
                    screen.addstr(posY, posX, "Smartctl firmware was not reachable through USB interface.")
                else:
                    if device.smartStatusCode == SMART_STATUS_CODE_NOT_INITIALIZED:
                        smartTestStateMsg = SMART_STATUS_CODE_NOT_FOUND_MSG
                    else:
                        smartTestStateMsg = "SMART status code " + str(device.smartStatusCode) + ": "
                        smartTestStateMsg += device.smartStatusDescription
                    screen.addstr(posY, posX, smartTestStateMsg)
                posY += 2  # Increment vertical cursor and add blank line.

                # Print the list of important attributes.
                screen.addstr(posY, posX, attributeHeader())
                posY += 1
                for attribute in device.importantAttributes:
                    screen.addstr(posY, posX, attribute.smartctlLine)
                    posY += 1  # Increment vertical cursor
                posY += 1  # Add a blank line before next section of info.

                # Print the test history for the device.
                # NOTE: The SMART firmware standard stores up to 21 tests and thereafter starts recording over top
                #       of older tests.
                if len(device.testHistory) > 0:
                    screen.addstr(posY, posX, device.testHistoryHeader)
                    posY += 1  # Increment vertical cursor
                    for testResult in device.testHistory:
                        screen.addstr(posY + 1, posX, testResult)
                        posY += 1  # Increment vertical cursor.
                else:
                    screen.addstr(posY, posX, "No history of SMART tests found for " + deviceName)
                    posY += 1  # Increment vertical cursor
                posY += 1  # Add a blank line before next section of info.

            # Draw displaying testing stuff if that mode is active.
            if displayTestFlag:
                screen.addstr(10, 10, " NORMAL ")
                screen.addstr(11, 10, " REVERSE ", curses.A_REVERSE)
                screen.addstr(12, 10, " BLINK ", curses.A_BLINK)
                screen.addstr(13, 10, " BOLD ", curses.A_BOLD)
                screen.addstr(14, 10, " DIM ", curses.A_DIM)
                screen.addstr(15, 10, " STANDOUT ", curses.A_STANDOUT)
                screen.addstr(16, 10, " UNDERLINE ", curses.A_UNDERLINE)
                screen.addstr(17, 10, " COLOR! ", curses.color_pair(1))

            # Show the cursor when in search mode and hide it the rest of the time.
            if searchModeFlag:
                curses.curs_set(1)
                # Position the cursor by printing nothing where it should be.
                screen.addstr(POS_BY, POS_BX + len(SEARCH_PROMPT + searchString), "")

            # Hide the cursor when not in search mode.
            else:
                curses.curs_set(0)

            # Update the view.
            screen.refresh()

        # Check for and handle keypresses.
        keypress = screen.getch()
        if keypress is not NO_KEYS_PRESSED:
            # Assume the screen will need to be redrawn anytime a key is pressed.
            redrawScreen = True

            # In search mode most keys should be added to the search string until Esc or Enter are pressed.
            if searchModeFlag:
                if keypress == ESCAPE_KEY:
                    searchString = ""
                    searchModeFlag = False
                elif keypress == ENTER_KEY:
                    selector, messageBarContents = searchDevices(searchString, devices)
                    searchModeFlag = False
                    searchString = ""  # Clear the search string after each search.
                elif keypress == curses.KEY_BACKSPACE:
                    searchString = searchString[:-1]
                elif keypress < 256:  # ASCII keys get added to search.
                    searchString += curses.keyname(keypress)
                else:
                    pass  # All other keys are ignored in search mode.

            # When not in search mode, all keys are interpreted as commands.
            else:
                # Pause briefly to see if another keypress happens rapidly enough to imply barcode scanning.
                millisecondsElapsed = 0
                startTime = time.time()
                while millisecondsElapsed < RAPID_KEYPRESS_THRESHOLD:
                    # Repeatedly query getch().
                    keypress2 = screen.getch()
                    if keypress2 is not NO_KEYS_PRESSED:
                        searchModeFlag = True
                        searchString += curses.keyname(keypress)  # Add the first keypress to the search.
                        searchString += curses.keyname(keypress2)  # Add the second keypress to the search.
                        break
                    millisecondsElapsed = int((time.time() - startTime) * 1000)

                # Check again that search mode has not been triggered by rapid keypresses.
                if not searchModeFlag:
                    # If a drive list is present then check for cursor keys.
                    if len(devices) > 0:
                        if keypress == curses.KEY_DOWN:
                            selector = (selector + 1) % len(devices)
                        if keypress == curses.KEY_UP:
                            selector = (selector - 1) % len(devices)
                    else:
                        selector = SELECTOR_ABSENT

                    if keypress == ord('f'):
                        searchModeFlag = True

                    if keypress == ord('d'):
                        displayTestFlag = not displayTestFlag

                    if keypress == ord('s'):
                        if selector is not SELECTOR_ABSENT:
                            devices[selector].runShortTest()
                        refreshDevices = redrawScreen = True

                    if keypress == ord('l'):
                        if selector is not SELECTOR_ABSENT:
                            devices[selector].runLongTest()
                        refreshDevices = redrawScreen = True

                    if keypress == ord('a'):
                        if selector is not SELECTOR_ABSENT:
                            devices[selector].abortTest()
                        refreshDevices = redrawScreen = True

                    if keypress == ord('r'):
                        refreshDevices = redrawScreen = True

                    if keypress == ord('q'):
                        exitFlag = True

        # Check if any drives have a smartctl query in progress.
        for device in devices:
            if device.state == DR_STATE_QUERYING and device.queryIsDone():
                device.interpretSmartctlOutput()  # Process smartctl output.
                redrawScreen = True  # Show outcome by redrawing screen.

        time.sleep(0.01)  # Sleep for this many seconds to reduce CPU load.

    # Clear the screen so that curses doesn't leave it's junk on the terminal (only happens on sysrescue machine).
    screen.clear()
    screen.refresh()


# Initialize Curses (set various parameters, etc).
def initCurses(screen):
    screen.nodelay(True)  # Make getch() non-blocking.
    curses.start_color()  # DEBUG: I'm not sure this does anything...
    curses.use_default_colors()
    # curses.init_pair(1, curses.COLOR_RED, -1)


def searchDevices(searchString, devices):
    message = ""  # Default to no message.
    selector = SELECTOR_ABSENT  # Default to hiding the selector.
    # Build a list of search-matching devices and highlight them as selected.
    matchingDevices = list()
    for i in range(len(devices)):
        if devices[i].matchSearchString(searchString):
            matchingDevices.append(devices[i])
            selector = i  # Set selector to matching drive.
    if len(matchingDevices) == 0:
        message = "No drives matched search string."
    if len(matchingDevices) >= 2:
        message = "Search matched multiple drives:"
        for device in matchingDevices:
            message += " " + device.devicePath
            selector = SELECTOR_ABSENT  # Hide the selector if >1 device matched search.
    return selector, message


def findAllDrives():
    # Get a list of all hard drive device paths.
    devicePaths = glob.glob('/dev/sd?')

    devices = list()

    # Load each device and print a summary of it.
    for devicePath in sorted(devicePaths):
        # Attempt to load device smartctl info (and suppress pySmart warnings).
        device = Drive(devicePath)
        devices.append(device)

    return devices


curses.wrapper(main)
