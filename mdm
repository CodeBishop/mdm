#!/usr/bin/env python2
# Copyright (C) 2018  Scott Bishop <scott.bishop.dev@gmail.com>
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.


# Multi-Drive Manager (mdm)
###########################
# A utility for managing the simultaneous S.M.A.R.T. testing and secure wiping of multiple data storage devices.
# NOTE: Beep effects won't work unless you have 'beep' installed and the pcspkr module installed (either
#       temporarily by modprobe or permanently in /etc/modules).


# Misc Dev Notes
################
# Summary of sysrescue display differences.
#   The terminal does not get restored when a curses program ends. The prompt re-appears at the bottom
#       and the screen remains cluttered with whatever was on display.
#   Only 8 colors are available and the curses.COLORS constant reflects that fact.
#   Font effects: dim=underline=normal, reverse=standout(fg/bg color reversal), bold is brighter text.
#       blink is grey text on dark grey background (no blinking).
#   Characters known to appear in smartctl output:
#       Parantheses, numbers, letters, underscores, whitespace, +, -, :, =, ", ., square brackets,


# High Priority TO DO
#####################
# Make an ISO and add pcspkr to /etc/modules.


# Moderate Priority To Do
#########################
# Add a reverse search to (f)ind so that it also checks if any of the drive serial number are a subset of
#   the search string so that internal serials that are substrings of external ones can be found. Note that there
#   are drives that clip off the start of the external serial and other drives that clip off the end. Both happen.
# If only one drive is testing and the user aborts the test then it should not give a completion alert.
# Add a Drive.completedTest member, drives will show a status of "complete" if they finish a test
#   while the program is running or if the last test starts with "Completed" and the hours are within
#   24 hours of the currently shown hours.
# Make sure the program behaves reasonably when the window is resized too small to fit everything.
# Save the ETA to file so the program can be quit and re-run without losing the ETA.
# Figure out why the ETA column can briefly show a negative time at the first refresh after completion.
#   This can't happen without a buildTable() call, so how is that called when any Drive has junk data?
# Make the program frequently (1hz) scan for changes in /dev/sdX to see if drives have been hot-swapped.
# Add a machine ID feature so you can number the machines and they'll have unique beep sequences.
# Save status data to a /var/tmp file so that session settings remain if you quit the program and re-run it.
# Add support for having hdparm do secure wiping. This should skip the bus and run faster than DBAN but
#   make sure you DO NOT LET IT RUN OVER USB! Doing so can brick a drive apparently. More info here:
#        https://ata.wiki.kernel.org/index.php/ATA_Secure_Erase
# Make F5 work for refresh also.
# Rewrite the Drive.testHistory construction to use Drive.smartctlLines instead of Drive.smartctlOutput.
# Add functionality to extrapolate test completion within 1% (rather than 10%) based on smartctl reporting and time.
# Add shift-R refresh or some other trigger to rescan for Drives (in the event of hot-swapping).


# Low (long-term) Priority To Do
################################
# Rewrite the section of code that reads the attribute table. It's a pair of for-loops right now and clunky.
# Make the program detect if smartmontools is not installed so it can advise the user to install it.
# Make the program work under Windows and Mac OS.
# Turn the Drive class into a clean library suitable for general-purpose use and GPL release it.

import curses
import glob
import time
import os

from mdmSMART.Drive import *


# Drawing positions for view layout.
POS_BX = 1  # Left side of search/help bar.
POS_BY = 3  # Top side of search/help bar.
POS_MX = 1  # Left side of message bar.
POS_MY = 5  # Top side of message bar.
POS_DTX = 6  # Left side of drive table.
POS_DTY = 7  # Top side of drive table.

SELECTOR_ABSENT = -1
NO_KEYS_PRESSED = -1
ESCAPE_KEY = 27
ENTER_KEY = 10
RAPID_KEYPRESS_THRESHOLD = 30  # Minimum milliseconds to distinguish keyboard from barcode scanner.
SEARCH_PROMPT = "Find: "

# Constants related to the beep sequence alert.
BASE_BEEP = "beep -f1000 -l50 -n -f2000 -l50 -n -f3000 -l40 -n -f4000 -l30 -D1200"
# BEEP_START_FREQ = 200
# BEEP_FREQ_STEP = 100
# BEEP_LENGTH_MS = 150
# BEEP_DELAY_MS = 250
BEEP_REPEAT_COUNT = 3
BEEP_REPEAT_DELAY_SECS = 600

HOURS_WARNING = 25000  # Number of drive operation hours above which the user is warned of old age.
HOURS_CRITICAL = 50000  # Number of drive operation hours above which the user is strongly warned of old age.

# Headers and widths of the columns in the drive table.
TABLE_HEADERS = ["Path", "RPM", "Size", "Model", "Serial", "RSec", "Hours", "GSen", "Alert", "State", "ETA"]
columnWidths = [9, 5, 8, 22, 19, 4, 6, 5, 10, 15, 5]

MIN_SCREEN_HEIGHT = 34
MIN_SCREEN_WIDTH = sum(columnWidths) + 18

# Before initializing curses, remove the Esc key delay from the OS environment.
os.environ.setdefault('ESCDELAY', '0')

attributeHeader = "ID# ATTRIBUTE_NAME          FLAG     VALUE WORST THRESH TYPE      UPDATED  WHEN_FAILED RAW_VALUE"

# Check for root.
if not os.getuid() == 0:
    print("Only user ID #0 (root) can run this program")
    exit(1)


def main(screen):
    initCurses(screen)  # Set parameters of curses environment.
    checkScreenSize(screen)  # Test that screen is large enough.
    screen.nodelay(True)  # Make getch() non-blocking.
    setupCursesUtils(screen)  # Connect curses to the utility function library.
    selector = SELECTOR_ABSENT  # Hide the drive selector until drives are found.
    searchString = ""
    searchModeFlag = False  # Toggle search mode (as versus command mode).
    barcodeScanDetection = False  # Treat rapid keypresses as barcode scans to be searched.
    redrawScreen = True  # Signal a screen redraw/refresh.
    refreshDrives = True  # Signal a rescan of all drives.
    autoRefresh = True  # Signal recurring rescan of all drives.
    autoRefreshDelaySecs = 60  # Time between auto-rescan of all drives.
    messageBarContents = ""
    programTitle = "%%%r%%%0Multi-Drive Manager"  # Title shown at top of screen.
    testInProgress = False  # True if any drive is in a testing state.
    completionAlert = False  # True if the program is alerting the user all drives have finished testing.
    beepAlertStartTime = 0  # Reset alert beep repeat delay (unit is number of seconds since epoch).
    beepsRemaining = 0  # Number of alert beeps left to repeat.

    # Construct alert message window.
    alertWindow = curses.newwin(16, 40, 3, 5)
    alertWindow.bkgd(curses.color_pair(1))
    alertWindow.bkgd(curses.A_REVERSE)
    alertWindow.bkgdset(curses.color_pair(1))
    alertWindow.bkgdset(curses.A_REVERSE)
    alertWindow.border(0)
    setPrintWindow(alertWindow)
    printAt(11, 7, "TESTING COMPLETE")
    printAt(7, 13, "Press Any Key to Continue")
    setPrintWindow(screen)

    # Build initial list of drives.
    drives = findAllDrives()

    exitFlag = False
    lastRefresh = time.time()
    while not exitFlag:
        # Check if auto-refresh should be triggered.
        if autoRefresh and (time.time() - lastRefresh) > autoRefreshDelaySecs:
            refreshDrives = True

        # Rescan the drives if signaled to.
        if refreshDrives:
            # Reset the signal flag.
            refreshDrives = False
            for drive in drives:
                drive.initiateQuery()
            lastRefresh = time.time()
            redrawScreen = True

        # Draw the screen if anything has changed.
        if redrawScreen:
            # Reset the signal flag.
            redrawScreen = False

            # Clear the screen
            screen.erase()
            screen.border(0)

            # Print the program title.
            printAt(1, 1, programTitle)

            # Print the search bar or help bar.
            if searchModeFlag:
                printAt(POS_BX, POS_BY, SEARCH_PROMPT + searchString)
            else:
                printAt(POS_BX, POS_BY, "(f)ind  (r)efresh  (s)hort test  (l)ong test  (L)ong test all  " +
                                        "(a)bort test  (q)uit")

            # Print the message bar.
            printAt(POS_MX, POS_MY, messageBarContents)

            # Print the drive list.
            table = buildDriveTable(drives)  # Construct a table of attribute text from the drive list.
            if selector is not SELECTOR_ABSENT:
                table[selector+1][0] = CEC_REVERSE + table[selector+1][0]
            screenHeight, screenWidth = screen.getmaxyx()  # Get limitations of screen size.
            drawTable(table, columnWidths, POS_DTX, POS_DTY, screenWidth - POS_DTX, screenHeight - POS_DTY)

            # If a drive is currently selected.
            if selector is not SELECTOR_ABSENT:
                # Draw the selector.
                printAt(POS_DTX - 4, POS_DTY + selector + 1, CEC_REVERSE + "--> ")

                # Note the drive the selector is pointed at.
                drive = drives[selector]
                driveName = drive.devicePath  # Refer to the drive by its path.

                # Print detailed info for the currently selected drive starting from a position below the drive list.
                posX, posY = 1, POS_DTY + len(drives) + 2

                # Print the current smartctl testing status.
                if drive.unknownUSBBridge:
                    printAt(posX, posY, "SMART firmware was not reachable through USB interface.")
                else:
                    if drive.smartStatusCode == SMART_STATUS_CODE_NOT_INITIALIZED:
                        smartTestStateMsg = SMART_STATUS_CODE_NOT_FOUND_MSG
                    else:
                        smartTestStateMsg = "SMART status code " + str(drive.smartStatusCode) + ": "
                        smartTestStateMsg += drive.smartStatusDescription
                    printAt(posX, posY, smartTestStateMsg)
                posY += 2  # Increment vertical cursor and add blank line.

                # Print the list of important attributes.
                if len(drive.importantAttributes) > 0:
                    printAt(posX, posY, attributeHeader)
                    posY += 1
                    for attribute in drive.importantAttributes:
                        if attribute.hasWhenFailed:
                            printAt(posX, posY, CEC_YELLOW + attribute.smartctlLine)
                        else:
                            printAt(posX, posY, attribute.smartctlLine)
                        posY += 1  # Increment vertical cursor
                    posY += 1  # Add a blank line before next section of info.

                # Print the test history for the drive.
                # NOTE: The SMART firmware standard stores up to 21 tests and thereafter starts recording over top
                #       of older tests.
                if drive.smartCapable:
                    if len(drive.testHistory) > 0:
                        printAt(posX, posY, drive.testHistoryHeader)
                        posY += 1  # Increment vertical cursor
                        for testResult in drive.testHistory:
                            if any(msg in testResult for msg in harmlessTestMessages):
                                printAt(posX, posY, testResult)
                            else:
                                printAt(posX, posY, CEC_RED + testResult)
                            posY += 1  # Increment vertical cursor.
                    else:
                        printAt(posX, posY, "No history of SMART tests found for " + driveName)
                        posY += 1  # Increment vertical cursor
                    posY += 1  # Add a blank line before next section of info.

            # Show the cursor when in search mode and hide it the rest of the time.
            if searchModeFlag:
                curses.curs_set(1)
                # Position the cursor by printing nothing where it should be.
                screen.addstr(POS_BY, POS_BX + len(SEARCH_PROMPT + searchString), "")
            # Hide the cursor when not in search mode.
            else:
                curses.curs_set(0)

            # Overlay screen with alert notification if one is active.
            if completionAlert:
                alertWindow.overwrite(screen)

            # Update the view.
            screen.refresh()

        # Send alert beep if appropriate.
        if completionAlert and beepsRemaining > 0 and (time.time() - beepAlertStartTime) > BEEP_REPEAT_DELAY_SECS:
            # Send alert beep with non-blocking terminal command.
            beepCommand = BASE_BEEP
            subprocess.Popen(beepCommand.split(), stdout=subprocess.PIPE, stderr=DEVNULL)
            beepAlertStartTime = time.time()
            beepsRemaining -= 1

        # Check for and handle keypresses.
        keypress = screen.getch()
        if keypress is not NO_KEYS_PRESSED:
            # Assume the screen will need to be redrawn anytime a key is pressed.
            redrawScreen = True

            # Test for rapid keypresses if barcode scanner detection is enabled.
            if barcodeScanDetection:
                # Pause briefly to see if another keypress happens rapidly enough to imply barcode scanning.
                millisecondsElapsed = 0
                startTime = time.time()
                while millisecondsElapsed < RAPID_KEYPRESS_THRESHOLD:
                    # Repeatedly query getch().
                    keypress2 = screen.getch()
                    if keypress2 is not NO_KEYS_PRESSED:
                        searchModeFlag = True
                        searchString += curses.keyname(keypress)  # Add the first keypress to the search.
                        searchString += curses.keyname(keypress2)  # Add the second keypress to the search.
                        break
                    millisecondsElapsed = int((time.time() - startTime) * 1000)

            # If acknowledging an alert message.
            if completionAlert:
                completionAlert = False  # Shut off alert message.

            # In search mode most keys should be added to the search string until Esc or Enter are pressed.
            elif searchModeFlag:
                if keypress == ESCAPE_KEY:
                    searchString = ""
                    searchModeFlag = False
                elif keypress == ENTER_KEY:
                    if len(searchString) > 0:
                        selector, messageBarContents = searchDrives(searchString, drives)
                    searchModeFlag = False
                    searchString = ""  # Clear the search string after each search.
                elif keypress == curses.KEY_BACKSPACE:
                    searchString = searchString[:-1]
                elif keypress < 256:  # ASCII keys get added to search.
                    searchString += curses.keyname(keypress)
                else:
                    pass  # All other keys are ignored in search mode.

            # If not in any special modes (searching, alert acknowledgement, etc), then interpret keys as commands.
            else:
                # If a drive list is present then check for cursor keys.
                if len(drives) > 0:
                    if keypress == curses.KEY_DOWN:
                        selector = (selector + 1) % len(drives)
                    if keypress == curses.KEY_UP:
                        selector = (selector - 1) % len(drives)
                else:
                    selector = SELECTOR_ABSENT

                if keypress == ESCAPE_KEY:
                    selector = SELECTOR_ABSENT

                if keypress == ord('f'):
                    selector = SELECTOR_ABSENT
                    searchModeFlag = True

                if keypress == ord('s'):
                    if selector is not SELECTOR_ABSENT:
                        # Start the test, refresh the drive and redraw the screen.
                        drives[selector].runShortTest()
                        redrawScreen = True

                if keypress == ord('l'):
                    if selector is not SELECTOR_ABSENT:
                        # Start the test, refresh the drive and redraw the screen.
                        drives[selector].runLongTest()
                        redrawScreen = True

                if keypress == ord('L'):
                    # Start the tests, refresh the drives and redraw the screen.
                    for drive in drives:
                        drive.runLongTest()
                    redrawScreen = True

                if keypress == ord('a'):
                    if selector is not SELECTOR_ABSENT:
                        drives[selector].abortTest()
                    refreshDrives = redrawScreen = True

                if keypress == ord('r'):
                    refreshDrives = redrawScreen = True

                if keypress in [ord('q'), ord('Q')]:
                    exitFlag = True

        # Check if any drives have a smartctl query in progress.
        for drive in drives:
            if drive.state == DR_STATE_QUERYING and drive.queryIsDone():
                # If a drive is identified as having an unknown USB bridge then remove it from the list of drives.
                if drive.unknownUSBBridge:
                    drives.remove(drive)
                redrawScreen = True  # Show outcome by redrawing screen.

        # If any drives are testing then make sure test-in-progress flag is True.
        if any(drive.state == DR_STATE_TESTING for drive in drives):
            testInProgress = True
        else:
            # If no drives are testing or querying then the testInProgress flag triggers a completion alert.
            if testInProgress and not any(drive.state == DR_STATE_QUERYING for drive in drives):
                testInProgress = False
                completionAlert = True
                beepsRemaining = BEEP_REPEAT_COUNT

        time.sleep(0.01)  # Sleep for this many seconds to reduce CPU load.

    # Clear the screen so that curses doesn't leave it's junk on the terminal (only happens on sysrescue machine).
    screen.clear()
    screen.refresh()


# Construct a 2D array for drive data, including a header row.
def buildDriveTable(driveList):
    table = list()
    table.append(TABLE_HEADERS)
    for drive in driveList:
        # Make a color-coded string of the reallocated sector count.
        if drive.reallocCount is 0:
            reallocText = CEC_GREEN + "0"
        elif drive.reallocCount > 0:
            reallocText = CEC_RED + str(drive.reallocCount)
        else:
            reallocText = CEC_YELLOW + "???"  # Includes NOT_INITIALIZED.

        # Note whether the drive has any failed attributes.
        if drive.hasFailureHistory():
            alertMessage = CEC_RED + "bad test"
        elif drive.hasFailedAttributes():
            alertMessage = CEC_YELLOW + "bad value"
        else:
            alertMessage = ""

        # Check whether hours of operation was detected.
        if drive.hours is NOT_INITIALIZED:
            driveHours = ""
        elif drive.hours > HOURS_CRITICAL:
            driveHours = CEC_RED + str(drive.hours)
        elif drive.hours > HOURS_WARNING:
            driveHours = CEC_YELLOW + str(drive.hours)
        else:
            driveHours = str(drive.hours)

        entry = list()
        entry.append(drive.devicePath)
        entry.append(drive.rotationRate)
        entry.append(drive.capacity)
        entry.append(drive.model)
        entry.append(drive.serial)
        entry.append(reallocText)
        entry.append(driveHours)
        entry.append(str(drive.GSenseCount))
        entry.append(alertMessage)
        entry.append(drive.statusString())
        entry.append(drive.testTimeRemaining())

        table.append(entry)
    return table


# Halt with error if screen is too small.
def checkScreenSize(screen):
    height, width = screen.getmaxyx()
    if height < MIN_SCREEN_HEIGHT or width < MIN_SCREEN_WIDTH:
        curses.endwin()
        print "ERROR: Screen is too small to run program."
        print "   Available: width=" + str(width) + "   height=" + str(height)
        print "   Needed:    width=" + str(MIN_SCREEN_WIDTH) + "   height=" + str(MIN_SCREEN_HEIGHT)
        exit(1)


# Returns true if all drives are idle/unknown,  (not testing or querying).
def allDrivesAreIdleOrUnknown(driveList):
    for drive in driveList:
        if drive.state not in [DR_STATE_UNKNOWN, DR_STATE_IDLE]:
            return False
    return True


# Initialize Curses (set various parameters, etc).
def initCurses(screen):
    screen.nodelay(True)  # Make getch() non-blocking.


def searchDrives(searchString, drives):
    message = ""  # Default to no message.
    selector = SELECTOR_ABSENT  # Default to hiding the selector.
    # Build a list of search-matching drives and highlight them as selected.
    matchingDrives = list()
    for i in range(len(drives)):
        if drives[i].matchSearchString(searchString):
            matchingDrives.append(drives[i])
            selector = i  # Set selector to matching drive.
    if len(matchingDrives) == 0:
        message = "No drives matched search string: " + searchString
    if len(matchingDrives) >= 2:
        message = "Search matched multiple drives:"
        for drive in matchingDrives:
            message += " " + drive.devicePath
            selector = SELECTOR_ABSENT  # Hide the selector if >1 drive matched search.
    return selector, message


def findAllDrives():
    # Get a list of all hard drive drive paths.
    drivePaths = glob.glob('/dev/sd?')

    drives = list()

    # Load each drive and print a summary of it.
    for drivePath in sorted(drivePaths):
        # Attempt to load drive smartctl info.
        drive = Drive(drivePath)
        drives.append(drive)

    return drives


curses.wrapper(main)
